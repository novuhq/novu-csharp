//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Novu.Models.Components
{
    using Newtonsoft.Json;
    using Novu.Models.Components;
    using Novu.Utils;
    using System.Collections.Generic;
    
    public class TriggerEventRequestDto
    {

        /// <summary>
        /// The trigger identifier of the workflow you wish to send. This identifier can be found on the workflow page.
        /// </summary>
        [JsonProperty("name")]
        public string WorkflowId { get; set; } = default!;

        /// <summary>
        /// The payload object is used to pass additional custom information that could be <br/>
        /// 
        /// <remarks>
        ///     used to render the workflow, or perform routing rules based on it. <br/>
        ///       This data will also be available when fetching the notifications feed from the API to display certain parts of the UI.
        /// </remarks>
        /// </summary>
        [JsonProperty("payload")]
        public Dictionary<string, object>? Payload { get; set; }

        /// <summary>
        /// This could be used to override provider specific configurations
        /// </summary>
        [JsonProperty("overrides")]
        public Overrides? Overrides { get; set; }

        /// <summary>
        /// The recipients list of people who will receive the notification.
        /// </summary>
        [JsonProperty("to")]
        public To To { get; set; } = default!;

        /// <summary>
        /// A unique identifier for this transaction, we will generate a UUID if not provided.
        /// </summary>
        [JsonProperty("transactionId")]
        public string? TransactionId { get; set; }

        /// <summary>
        /// It is used to display the Avatar of the provided actor&apos;s subscriber id or actor object.<br/>
        /// 
        /// <remarks>
        /// <br/>
        /// <br/>
        ///     If a new actor object is provided, we will create a new subscriber in our system
        /// </remarks>
        /// </summary>
        [JsonProperty("actor")]
        public Actor? Actor { get; set; }

        /// <summary>
        /// It is used to specify a tenant context during trigger event.<br/>
        /// 
        /// <remarks>
        ///     Existing tenants will be updated with the provided details.
        /// </remarks>
        /// </summary>
        [JsonProperty("tenant")]
        public Tenant? Tenant { get; set; }
    }
}