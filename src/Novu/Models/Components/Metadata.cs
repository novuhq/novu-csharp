//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Novu.Models.Components
{
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;
    using Novu.Models.Components;
    using Novu.Utils;
    using System;
    using System.Collections.Generic;
    using System.Numerics;
    using System.Reflection;
    

    public class MetadataType
    {
        private MetadataType(string value) { Value = value; }

        public string Value { get; private set; }
        public static MetadataType DigestRegularMetadata { get { return new MetadataType("DigestRegularMetadata"); } }
        
        public static MetadataType DigestTimedMetadata { get { return new MetadataType("DigestTimedMetadata"); } }
        
        public static MetadataType DelayRegularMetadata { get { return new MetadataType("DelayRegularMetadata"); } }
        
        public static MetadataType DelayScheduledMetadata { get { return new MetadataType("DelayScheduledMetadata"); } }
        
        public static MetadataType Null { get { return new MetadataType("null"); } }

        public override string ToString() { return Value; }
        public static implicit operator String(MetadataType v) { return v.Value; }
        public static MetadataType FromString(string v) {
            switch(v) {
                case "DigestRegularMetadata": return DigestRegularMetadata;
                case "DigestTimedMetadata": return DigestTimedMetadata;
                case "DelayRegularMetadata": return DelayRegularMetadata;
                case "DelayScheduledMetadata": return DelayScheduledMetadata;
                case "null": return Null;
                default: throw new ArgumentException("Invalid value for MetadataType");
            }
        }
        public override bool Equals(object? obj)
        {
            if (obj == null || GetType() != obj.GetType())
            {
                return false;
            }
            return Value.Equals(((MetadataType)obj).Value);
        }

        public override int GetHashCode()
        {
            return Value.GetHashCode();
        }
    }


    /// <summary>
    /// Metadata associated with the workflow step. Can vary based on the type of step.
    /// </summary>
    [JsonConverter(typeof(Metadata.MetadataConverter))]
    public class Metadata {
        public Metadata(MetadataType type) {
            Type = type;
        }

        [SpeakeasyMetadata("form:explode=true")]
        public DigestRegularMetadata? DigestRegularMetadata { get; set; }

        [SpeakeasyMetadata("form:explode=true")]
        public DigestTimedMetadata? DigestTimedMetadata { get; set; }

        [SpeakeasyMetadata("form:explode=true")]
        public DelayRegularMetadata? DelayRegularMetadata { get; set; }

        [SpeakeasyMetadata("form:explode=true")]
        public DelayScheduledMetadata? DelayScheduledMetadata { get; set; }

        public MetadataType Type { get; set; }


        public static Metadata CreateDigestRegularMetadata(DigestRegularMetadata digestRegularMetadata) {
            MetadataType typ = MetadataType.DigestRegularMetadata;

            Metadata res = new Metadata(typ);
            res.DigestRegularMetadata = digestRegularMetadata;
            return res;
        }

        public static Metadata CreateDigestTimedMetadata(DigestTimedMetadata digestTimedMetadata) {
            MetadataType typ = MetadataType.DigestTimedMetadata;

            Metadata res = new Metadata(typ);
            res.DigestTimedMetadata = digestTimedMetadata;
            return res;
        }

        public static Metadata CreateDelayRegularMetadata(DelayRegularMetadata delayRegularMetadata) {
            MetadataType typ = MetadataType.DelayRegularMetadata;

            Metadata res = new Metadata(typ);
            res.DelayRegularMetadata = delayRegularMetadata;
            return res;
        }

        public static Metadata CreateDelayScheduledMetadata(DelayScheduledMetadata delayScheduledMetadata) {
            MetadataType typ = MetadataType.DelayScheduledMetadata;

            Metadata res = new Metadata(typ);
            res.DelayScheduledMetadata = delayScheduledMetadata;
            return res;
        }

        public static Metadata CreateNull() {
            MetadataType typ = MetadataType.Null;
            return new Metadata(typ);
        }

        public class MetadataConverter : JsonConverter
        {

            public override bool CanConvert(System.Type objectType) => objectType == typeof(Metadata);

            public override bool CanRead => true;

            public override object? ReadJson(JsonReader reader, System.Type objectType, object? existingValue, JsonSerializer serializer)
            {
                var json = JRaw.Create(reader).ToString();
                if (json == "null")
                {
                    return null;
                }

                var fallbackCandidates = new List<(System.Type, object, string)>();

                try
                {
                    return new Metadata(MetadataType.DelayScheduledMetadata)
                    {
                        DelayScheduledMetadata = ResponseBodyDeserializer.DeserializeUndiscriminatedUnionMember<DelayScheduledMetadata>(json)
                    };
                }
                catch (ResponseBodyDeserializer.MissingMemberException)
                {
                    fallbackCandidates.Add((typeof(DelayScheduledMetadata), new Metadata(MetadataType.DelayScheduledMetadata), "DelayScheduledMetadata"));
                }
                catch (ResponseBodyDeserializer.DeserializationException)
                {
                    // try next option
                }
                catch (Exception)
                {
                    throw;
                }

                try
                {
                    return new Metadata(MetadataType.DelayRegularMetadata)
                    {
                        DelayRegularMetadata = ResponseBodyDeserializer.DeserializeUndiscriminatedUnionMember<DelayRegularMetadata>(json)
                    };
                }
                catch (ResponseBodyDeserializer.MissingMemberException)
                {
                    fallbackCandidates.Add((typeof(DelayRegularMetadata), new Metadata(MetadataType.DelayRegularMetadata), "DelayRegularMetadata"));
                }
                catch (ResponseBodyDeserializer.DeserializationException)
                {
                    // try next option
                }
                catch (Exception)
                {
                    throw;
                }

                try
                {
                    return new Metadata(MetadataType.DigestTimedMetadata)
                    {
                        DigestTimedMetadata = ResponseBodyDeserializer.DeserializeUndiscriminatedUnionMember<DigestTimedMetadata>(json)
                    };
                }
                catch (ResponseBodyDeserializer.MissingMemberException)
                {
                    fallbackCandidates.Add((typeof(DigestTimedMetadata), new Metadata(MetadataType.DigestTimedMetadata), "DigestTimedMetadata"));
                }
                catch (ResponseBodyDeserializer.DeserializationException)
                {
                    // try next option
                }
                catch (Exception)
                {
                    throw;
                }

                try
                {
                    return new Metadata(MetadataType.DigestRegularMetadata)
                    {
                        DigestRegularMetadata = ResponseBodyDeserializer.DeserializeUndiscriminatedUnionMember<DigestRegularMetadata>(json)
                    };
                }
                catch (ResponseBodyDeserializer.MissingMemberException)
                {
                    fallbackCandidates.Add((typeof(DigestRegularMetadata), new Metadata(MetadataType.DigestRegularMetadata), "DigestRegularMetadata"));
                }
                catch (ResponseBodyDeserializer.DeserializationException)
                {
                    // try next option
                }
                catch (Exception)
                {
                    throw;
                }

                if (fallbackCandidates.Count > 0)
                {
                    fallbackCandidates.Sort((a, b) => ResponseBodyDeserializer.CompareFallbackCandidates(a.Item1, b.Item1, json));
                    foreach(var (deserializationType, returnObject, propertyName) in fallbackCandidates)
                    {
                        try
                        {
                            return ResponseBodyDeserializer.DeserializeUndiscriminatedUnionFallback(deserializationType, returnObject, propertyName, json);
                        }
                        catch (ResponseBodyDeserializer.DeserializationException)
                        {
                            // try next fallback option
                        }
                        catch (Exception)
                        {
                            throw;
                        }
                    }
                }

                throw new InvalidOperationException("Could not deserialize into any supported types.");
            }

            public override void WriteJson(JsonWriter writer, object? value, JsonSerializer serializer)
            {
                if (value == null) {
                    writer.WriteRawValue("null");
                    return;
                }
                Metadata res = (Metadata)value;
                if (MetadataType.FromString(res.Type).Equals(MetadataType.Null))
                {
                    writer.WriteRawValue("null");
                    return;
                }
                if (res.DigestRegularMetadata != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.DigestRegularMetadata));
                    return;
                }
                if (res.DigestTimedMetadata != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.DigestTimedMetadata));
                    return;
                }
                if (res.DelayRegularMetadata != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.DelayRegularMetadata));
                    return;
                }
                if (res.DelayScheduledMetadata != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.DelayScheduledMetadata));
                    return;
                }

            }

        }

    }
}