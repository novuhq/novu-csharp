//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Novu.Models.Components
{
    using Newtonsoft.Json;
    using Novu.Models.Components;
    using Novu.Utils;
    using System.Collections.Generic;
    
    /// <summary>
    /// Control values for the Digest step
    /// </summary>
    public class DigestStepUpsertDtoControlValues
    {

        /// <summary>
        /// JSONLogic filter conditions for conditionally skipping the step execution. Supports complex logical operations with AND, OR, and comparison operators. See https://jsonlogic.com/ for full typing reference.
        /// </summary>
        [JsonProperty("skip")]
        public Dictionary<string, object>? Skip { get; set; }

        /// <summary>
        /// The type of digest strategy. Determines which fields are applicable.
        /// </summary>
        [JsonProperty("type")]
        public DigestStepUpsertDtoType? Type { get; set; }

        /// <summary>
        /// The amount of time for the digest interval (for REGULAR type). Min 1.
        /// </summary>
        [JsonProperty("amount")]
        public double? Amount { get; set; }

        /// <summary>
        /// The unit of time for the digest interval (for REGULAR type).
        /// </summary>
        [JsonProperty("unit")]
        public DigestStepUpsertDtoUnit? Unit { get; set; }

        /// <summary>
        /// Configuration for look-back window (for REGULAR type).
        /// </summary>
        [JsonProperty("lookBackWindow")]
        public LookBackWindowDto? LookBackWindow { get; set; }

        /// <summary>
        /// Cron expression for TIMED digest. Min length 1.
        /// </summary>
        [JsonProperty("cron")]
        public string? Cron { get; set; }

        /// <summary>
        /// Specify a custom key for digesting events instead of the default event key.
        /// </summary>
        [JsonProperty("digestKey")]
        public string? DigestKey { get; set; }
    }
}