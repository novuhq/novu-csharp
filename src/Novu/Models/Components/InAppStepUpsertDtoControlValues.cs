//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Novu.Models.Components
{
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;
    using Novu.Models.Components;
    using Novu.Utils;
    using System;
    using System.Collections.Generic;
    using System.Numerics;
    using System.Reflection;

    public class InAppStepUpsertDtoControlValuesType
    {
        private InAppStepUpsertDtoControlValuesType(string value) { Value = value; }

        public string Value { get; private set; }

        public static InAppStepUpsertDtoControlValuesType InAppControlDto { get { return new InAppStepUpsertDtoControlValuesType("InAppControlDto"); } }

        public static InAppStepUpsertDtoControlValuesType MapOfAny { get { return new InAppStepUpsertDtoControlValuesType("mapOfAny"); } }

        public static InAppStepUpsertDtoControlValuesType Null { get { return new InAppStepUpsertDtoControlValuesType("null"); } }

        public override string ToString() { return Value; }
        public static implicit operator String(InAppStepUpsertDtoControlValuesType v) { return v.Value; }
        public static InAppStepUpsertDtoControlValuesType FromString(string v) {
            switch(v) {
                case "InAppControlDto": return InAppControlDto;
                case "mapOfAny": return MapOfAny;
                case "null": return Null;
                default: throw new ArgumentException("Invalid value for InAppStepUpsertDtoControlValuesType");
            }
        }
        public override bool Equals(object? obj)
        {
            if (obj == null || GetType() != obj.GetType())
            {
                return false;
            }
            return Value.Equals(((InAppStepUpsertDtoControlValuesType)obj).Value);
        }

        public override int GetHashCode()
        {
            return Value.GetHashCode();
        }
    }


    /// <summary>
    /// Control values for the In-App step.
    /// </summary>
    [JsonConverter(typeof(InAppStepUpsertDtoControlValues.InAppStepUpsertDtoControlValuesConverter))]
    public class InAppStepUpsertDtoControlValues
    {
        public InAppStepUpsertDtoControlValues(InAppStepUpsertDtoControlValuesType type)
        {
            Type = type;
        }

        [SpeakeasyMetadata("form:explode=true")]
        public InAppControlDto? InAppControlDto { get; set; }

        [SpeakeasyMetadata("form:explode=true")]
        public Dictionary<string, object>? MapOfAny { get; set; }

        public InAppStepUpsertDtoControlValuesType Type { get; set; }
        public static InAppStepUpsertDtoControlValues CreateInAppControlDto(InAppControlDto inAppControlDto)
        {
            InAppStepUpsertDtoControlValuesType typ = InAppStepUpsertDtoControlValuesType.InAppControlDto;

            InAppStepUpsertDtoControlValues res = new InAppStepUpsertDtoControlValues(typ);
            res.InAppControlDto = inAppControlDto;
            return res;
        }
        public static InAppStepUpsertDtoControlValues CreateMapOfAny(Dictionary<string, object> mapOfAny)
        {
            InAppStepUpsertDtoControlValuesType typ = InAppStepUpsertDtoControlValuesType.MapOfAny;

            InAppStepUpsertDtoControlValues res = new InAppStepUpsertDtoControlValues(typ);
            res.MapOfAny = mapOfAny;
            return res;
        }

        public static InAppStepUpsertDtoControlValues CreateNull()
        {
            InAppStepUpsertDtoControlValuesType typ = InAppStepUpsertDtoControlValuesType.Null;
            return new InAppStepUpsertDtoControlValues(typ);
        }

        public class InAppStepUpsertDtoControlValuesConverter : JsonConverter
        {

            public override bool CanConvert(System.Type objectType) => objectType == typeof(InAppStepUpsertDtoControlValues);

            public override bool CanRead => true;

            public override object? ReadJson(JsonReader reader, System.Type objectType, object? existingValue, JsonSerializer serializer)
            {
                var json = JRaw.Create(reader).ToString();
                if (json == "null")
                {
                    return null;
                }

                var fallbackCandidates = new List<(System.Type, object, string)>();

                try
                {
                    return new InAppStepUpsertDtoControlValues(InAppStepUpsertDtoControlValuesType.InAppControlDto)
                    {
                        InAppControlDto = ResponseBodyDeserializer.DeserializeUndiscriminatedUnionMember<InAppControlDto>(json)
                    };
                }
                catch (ResponseBodyDeserializer.MissingMemberException)
                {
                    fallbackCandidates.Add((typeof(InAppControlDto), new InAppStepUpsertDtoControlValues(InAppStepUpsertDtoControlValuesType.InAppControlDto), "InAppControlDto"));
                }
                catch (ResponseBodyDeserializer.DeserializationException)
                {
                    // try next option
                }
                catch (Exception)
                {
                    throw;
                }

                try
                {
                    return new InAppStepUpsertDtoControlValues(InAppStepUpsertDtoControlValuesType.MapOfAny)
                    {
                        MapOfAny = ResponseBodyDeserializer.DeserializeUndiscriminatedUnionMember<Dictionary<string, object>>(json)
                    };
                }
                catch (ResponseBodyDeserializer.MissingMemberException)
                {
                    fallbackCandidates.Add((typeof(Dictionary<string, object>), new InAppStepUpsertDtoControlValues(InAppStepUpsertDtoControlValuesType.MapOfAny), "MapOfAny"));
                }
                catch (ResponseBodyDeserializer.DeserializationException)
                {
                    // try next option
                }
                catch (Exception)
                {
                    throw;
                }

                if (fallbackCandidates.Count > 0)
                {
                    fallbackCandidates.Sort((a, b) => ResponseBodyDeserializer.CompareFallbackCandidates(a.Item1, b.Item1, json));
                    foreach(var (deserializationType, returnObject, propertyName) in fallbackCandidates)
                    {
                        try
                        {
                            return ResponseBodyDeserializer.DeserializeUndiscriminatedUnionFallback(deserializationType, returnObject, propertyName, json);
                        }
                        catch (ResponseBodyDeserializer.DeserializationException)
                        {
                            // try next fallback option
                        }
                        catch (Exception)
                        {
                            throw;
                        }
                    }
                }

                throw new InvalidOperationException("Could not deserialize into any supported types.");
            }

            public override void WriteJson(JsonWriter writer, object? value, JsonSerializer serializer)
            {
                if (value == null) {
                    writer.WriteRawValue("null");
                    return;
                }

                InAppStepUpsertDtoControlValues res = (InAppStepUpsertDtoControlValues)value;
                if (InAppStepUpsertDtoControlValuesType.FromString(res.Type).Equals(InAppStepUpsertDtoControlValuesType.Null))
                {
                    writer.WriteRawValue("null");
                    return;
                }

                if (res.InAppControlDto != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.InAppControlDto));
                    return;
                }

                if (res.MapOfAny != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.MapOfAny));
                    return;
                }
            }

        }

    }
}