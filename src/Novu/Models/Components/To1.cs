//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Novu.Models.Components
{
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;
    using Novu.Models.Components;
    using Novu.Utils;
    using System;
    using System.Collections.Generic;
    using System.Numerics;
    using System.Reflection;

    public class To1Type
    {
        private To1Type(string value) { Value = value; }

        public string Value { get; private set; }

        public static To1Type SubscriberPayloadDto { get { return new To1Type("SubscriberPayloadDto"); } }

        public static To1Type TopicPayloadDto { get { return new To1Type("TopicPayloadDto"); } }

        public static To1Type Str { get { return new To1Type("str"); } }

        public static To1Type Null { get { return new To1Type("null"); } }

        public override string ToString() { return Value; }
        public static implicit operator String(To1Type v) { return v.Value; }
        public static To1Type FromString(string v) {
            switch(v) {
                case "SubscriberPayloadDto": return SubscriberPayloadDto;
                case "TopicPayloadDto": return TopicPayloadDto;
                case "str": return Str;
                case "null": return Null;
                default: throw new ArgumentException("Invalid value for To1Type");
            }
        }
        public override bool Equals(object? obj)
        {
            if (obj == null || GetType() != obj.GetType())
            {
                return false;
            }
            return Value.Equals(((To1Type)obj).Value);
        }

        public override int GetHashCode()
        {
            return Value.GetHashCode();
        }
    }


    [JsonConverter(typeof(To1.To1Converter))]
    public class To1
    {
        public To1(To1Type type)
        {
            Type = type;
        }

        [SpeakeasyMetadata("form:explode=true")]
        public SubscriberPayloadDto? SubscriberPayloadDto { get; set; }

        [SpeakeasyMetadata("form:explode=true")]
        public TopicPayloadDto? TopicPayloadDto { get; set; }

        [SpeakeasyMetadata("form:explode=true")]
        public string? Str { get; set; }

        public To1Type Type { get; set; }
        public static To1 CreateSubscriberPayloadDto(SubscriberPayloadDto subscriberPayloadDto)
        {
            To1Type typ = To1Type.SubscriberPayloadDto;

            To1 res = new To1(typ);
            res.SubscriberPayloadDto = subscriberPayloadDto;
            return res;
        }
        public static To1 CreateTopicPayloadDto(TopicPayloadDto topicPayloadDto)
        {
            To1Type typ = To1Type.TopicPayloadDto;

            To1 res = new To1(typ);
            res.TopicPayloadDto = topicPayloadDto;
            return res;
        }
        public static To1 CreateStr(string str)
        {
            To1Type typ = To1Type.Str;

            To1 res = new To1(typ);
            res.Str = str;
            return res;
        }

        public static To1 CreateNull()
        {
            To1Type typ = To1Type.Null;
            return new To1(typ);
        }

        public class To1Converter : JsonConverter
        {

            public override bool CanConvert(System.Type objectType) => objectType == typeof(To1);

            public override bool CanRead => true;

            public override object? ReadJson(JsonReader reader, System.Type objectType, object? existingValue, JsonSerializer serializer)
            {
                var json = JRaw.Create(reader).ToString();
                if (json == "null")
                {
                    return null;
                }

                var fallbackCandidates = new List<(System.Type, object, string)>();

                try
                {
                    return new To1(To1Type.TopicPayloadDto)
                    {
                        TopicPayloadDto = ResponseBodyDeserializer.DeserializeUndiscriminatedUnionMember<TopicPayloadDto>(json)
                    };
                }
                catch (ResponseBodyDeserializer.MissingMemberException)
                {
                    fallbackCandidates.Add((typeof(TopicPayloadDto), new To1(To1Type.TopicPayloadDto), "TopicPayloadDto"));
                }
                catch (ResponseBodyDeserializer.DeserializationException)
                {
                    // try next option
                }
                catch (Exception)
                {
                    throw;
                }

                try
                {
                    return new To1(To1Type.SubscriberPayloadDto)
                    {
                        SubscriberPayloadDto = ResponseBodyDeserializer.DeserializeUndiscriminatedUnionMember<SubscriberPayloadDto>(json)
                    };
                }
                catch (ResponseBodyDeserializer.MissingMemberException)
                {
                    fallbackCandidates.Add((typeof(SubscriberPayloadDto), new To1(To1Type.SubscriberPayloadDto), "SubscriberPayloadDto"));
                }
                catch (ResponseBodyDeserializer.DeserializationException)
                {
                    // try next option
                }
                catch (Exception)
                {
                    throw;
                }

                if (json[0] == '"' && json[^1] == '"'){
                    return new To1(To1Type.Str)
                    {
                        Str = json[1..^1]
                    };
                }

                if (fallbackCandidates.Count > 0)
                {
                    fallbackCandidates.Sort((a, b) => ResponseBodyDeserializer.CompareFallbackCandidates(a.Item1, b.Item1, json));
                    foreach(var (deserializationType, returnObject, propertyName) in fallbackCandidates)
                    {
                        try
                        {
                            return ResponseBodyDeserializer.DeserializeUndiscriminatedUnionFallback(deserializationType, returnObject, propertyName, json);
                        }
                        catch (ResponseBodyDeserializer.DeserializationException)
                        {
                            // try next fallback option
                        }
                        catch (Exception)
                        {
                            throw;
                        }
                    }
                }

                throw new InvalidOperationException("Could not deserialize into any supported types.");
            }

            public override void WriteJson(JsonWriter writer, object? value, JsonSerializer serializer)
            {
                if (value == null) {
                    writer.WriteRawValue("null");
                    return;
                }

                To1 res = (To1)value;
                if (To1Type.FromString(res.Type).Equals(To1Type.Null))
                {
                    writer.WriteRawValue("null");
                    return;
                }

                if (res.SubscriberPayloadDto != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.SubscriberPayloadDto));
                    return;
                }

                if (res.TopicPayloadDto != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.TopicPayloadDto));
                    return;
                }

                if (res.Str != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.Str));
                    return;
                }
            }

        }

    }
}