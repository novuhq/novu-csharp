//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Novu.Models.Components
{
    using Newtonsoft.Json;
    using Novu.Utils;
    using System;
    
    public enum Operator
    {
        [JsonProperty("LARGER")]
        Larger,
        [JsonProperty("SMALLER")]
        Smaller,
        [JsonProperty("LARGER_EQUAL")]
        LargerEqual,
        [JsonProperty("SMALLER_EQUAL")]
        SmallerEqual,
        [JsonProperty("EQUAL")]
        Equal,
        [JsonProperty("NOT_EQUAL")]
        NotEqual,
        [JsonProperty("ALL_IN")]
        AllIn,
        [JsonProperty("ANY_IN")]
        AnyIn,
        [JsonProperty("NOT_IN")]
        NotIn,
        [JsonProperty("BETWEEN")]
        Between,
        [JsonProperty("NOT_BETWEEN")]
        NotBetween,
        [JsonProperty("LIKE")]
        Like,
        [JsonProperty("NOT_LIKE")]
        NotLike,
        [JsonProperty("IN")]
        In,
    }

    public static class OperatorExtension
    {
        public static string Value(this Operator value)
        {
            return ((JsonPropertyAttribute)value.GetType().GetMember(value.ToString())[0].GetCustomAttributes(typeof(JsonPropertyAttribute), false)[0]).PropertyName ?? value.ToString();
        }

        public static Operator ToEnum(this string value)
        {
            foreach(var field in typeof(Operator).GetFields())
            {
                var attributes = field.GetCustomAttributes(typeof(JsonPropertyAttribute), false);
                if (attributes.Length == 0)
                {
                    continue;
                }

                var attribute = attributes[0] as JsonPropertyAttribute;
                if (attribute != null && attribute.PropertyName == value)
                {
                    var enumVal = field.GetValue(null);

                    if (enumVal is Operator)
                    {
                        return (Operator)enumVal;
                    }
                }
            }

            throw new Exception($"Unknown value {value} for enum Operator");
        }
    }

}