//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Novu.Models.Components
{
    using Newtonsoft.Json;
    using Novu.Models.Components;
    using Novu.Utils;
    using System.Collections.Generic;
    
    public class TriggerEventToAllRequestDto
    {

        /// <summary>
        /// The trigger identifier associated for the template you wish to send. This identifier can be found on the template page.
        /// </summary>
        [JsonProperty("name")]
        public string Name { get; set; } = default!;

        /// <summary>
        /// The payload object is used to pass additional information that <br/>
        /// 
        /// <remarks>
        ///     could be used to render the template, or perform routing rules based on it. <br/>
        ///       For In-App channel, payload data are also available in &lt;Inbox /&gt;
        /// </remarks>
        /// </summary>
        [JsonProperty("payload")]
        public Dictionary<string, object> Payload { get; set; } = default!;

        /// <summary>
        /// This could be used to override provider specific configurations
        /// </summary>
        [JsonProperty("overrides")]
        public TriggerEventToAllRequestDtoOverrides? Overrides { get; set; }

        /// <summary>
        /// A unique identifier for this transaction, we will generated a UUID if not provided.
        /// </summary>
        [JsonProperty("transactionId")]
        public string? TransactionId { get; set; }

        /// <summary>
        /// It is used to display the Avatar of the provided actor&apos;s subscriber id or actor object.<br/>
        /// 
        /// <remarks>
        ///     If a new actor object is provided, we will create a new subscriber in our system<br/>
        ///     
        /// </remarks>
        /// </summary>
        [JsonProperty("actor")]
        public TriggerEventToAllRequestDtoActor? Actor { get; set; }

        /// <summary>
        /// It is used to specify a tenant context during trigger event.<br/>
        /// 
        /// <remarks>
        ///     If a new tenant object is provided, we will create a new tenant.<br/>
        ///     
        /// </remarks>
        /// </summary>
        [JsonProperty("tenant")]
        public TriggerEventToAllRequestDtoTenant? Tenant { get; set; }
    }
}