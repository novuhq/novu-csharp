//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Novu.Models.Errors
{
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;
    using Novu.Models.Errors;
    using Novu.Utils;
    using System;
    using System.Collections.Generic;
    using System.Numerics;
    using System.Reflection;
    

    public class MessageType
    {
        private MessageType(string value) { Value = value; }

        public string Value { get; private set; }
        public static MessageType Str { get { return new MessageType("str"); } }
        
        public static MessageType Number { get { return new MessageType("number"); } }
        
        public static MessageType Boolean { get { return new MessageType("boolean"); } }
        
        public static MessageType Four { get { return new MessageType("4"); } }
        
        public static MessageType ArrayOf5 { get { return new MessageType("arrayOf5"); } }
        
        public static MessageType Null { get { return new MessageType("null"); } }

        public override string ToString() { return Value; }
        public static implicit operator String(MessageType v) { return v.Value; }
        public static MessageType FromString(string v) {
            switch(v) {
                case "str": return Str;
                case "number": return Number;
                case "boolean": return Boolean;
                case "4": return Four;
                case "arrayOf5": return ArrayOf5;
                case "null": return Null;
                default: throw new ArgumentException("Invalid value for MessageType");
            }
        }
        public override bool Equals(object? obj)
        {
            if (obj == null || GetType() != obj.GetType())
            {
                return false;
            }
            return Value.Equals(((MessageType)obj).Value);
        }

        public override int GetHashCode()
        {
            return Value.GetHashCode();
        }
    }


    /// <summary>
    /// Value that failed validation
    /// </summary>
    [JsonConverter(typeof(Message.MessageConverter))]
    public class Message {
        public Message(MessageType type) {
            Type = type;
        }

        [SpeakeasyMetadata("form:explode=true")]
        public string? Str { get; set; }

        [SpeakeasyMetadata("form:explode=true")]
        public double? Number { get; set; }

        [SpeakeasyMetadata("form:explode=true")]
        public bool? Boolean { get; set; }

        [SpeakeasyMetadata("form:explode=true")]
        public Models.Errors.Four? Four { get; set; }

        [SpeakeasyMetadata("form:explode=true")]
        public List<Models.Errors.Five>? ArrayOf5 { get; set; }

        public MessageType Type { get; set; }


        public static Message CreateStr(string str) {
            MessageType typ = MessageType.Str;

            Message res = new Message(typ);
            res.Str = str;
            return res;
        }

        public static Message CreateNumber(double number) {
            MessageType typ = MessageType.Number;

            Message res = new Message(typ);
            res.Number = number;
            return res;
        }

        public static Message CreateBoolean(bool boolean) {
            MessageType typ = MessageType.Boolean;

            Message res = new Message(typ);
            res.Boolean = boolean;
            return res;
        }

        public static Message CreateFour(Models.Errors.Four four) {
            MessageType typ = MessageType.Four;

            Message res = new Message(typ);
            res.Four = four;
            return res;
        }

        public static Message CreateArrayOf5(List<Models.Errors.Five> arrayOf5) {
            MessageType typ = MessageType.ArrayOf5;

            Message res = new Message(typ);
            res.ArrayOf5 = arrayOf5;
            return res;
        }

        public static Message CreateNull() {
            MessageType typ = MessageType.Null;
            return new Message(typ);
        }

        public class MessageConverter : JsonConverter
        {

            public override bool CanConvert(System.Type objectType) => objectType == typeof(Message);

            public override bool CanRead => true;

            public override object? ReadJson(JsonReader reader, System.Type objectType, object? existingValue, JsonSerializer serializer)
            {
                var json = JRaw.Create(reader).ToString();
                if (json == "null")
                {
                    return null;
                }

                var fallbackCandidates = new List<(System.Type, object, string)>();

                try
                {
                    return new Message(MessageType.Four)
                    {
                        Four = ResponseBodyDeserializer.DeserializeUndiscriminatedUnionMember<Models.Errors.Four>(json)
                    };
                }
                catch (ResponseBodyDeserializer.MissingMemberException)
                {
                    fallbackCandidates.Add((typeof(Models.Errors.Four), new Message(MessageType.Four), "Four"));
                }
                catch (ResponseBodyDeserializer.DeserializationException)
                {
                    // try next option
                }
                catch (Exception)
                {
                    throw;
                }

                if (json[0] == '"' && json[^1] == '"'){
                    return new Message(MessageType.Str)
                    {
                        Str = json[1..^1]
                    };
                }

                try
                {
                    var converted = Convert.ToDouble(json);
                    return new Message(MessageType.Number)
                    {
                        Number = converted
                    };
                }
                catch (System.FormatException)
                {
                    // try next option
                }

                try
                {
                    var converted = Convert.ToBoolean(json);
                    return new Message(MessageType.Boolean)
                    {
                        Boolean = converted
                    };
                }
                catch (System.FormatException)
                {
                    // try next option
                }

                try
                {
                    return new Message(MessageType.ArrayOf5)
                    {
                        ArrayOf5 = ResponseBodyDeserializer.DeserializeUndiscriminatedUnionMember<List<Models.Errors.Five>>(json)
                    };
                }
                catch (ResponseBodyDeserializer.MissingMemberException)
                {
                    fallbackCandidates.Add((typeof(List<Models.Errors.Five>), new Message(MessageType.ArrayOf5), "ArrayOf5"));
                }
                catch (ResponseBodyDeserializer.DeserializationException)
                {
                    // try next option
                }
                catch (Exception)
                {
                    throw;
                }

                if (fallbackCandidates.Count > 0)
                {
                    fallbackCandidates.Sort((a, b) => ResponseBodyDeserializer.CompareFallbackCandidates(a.Item1, b.Item1, json));
                    foreach(var (deserializationType, returnObject, propertyName) in fallbackCandidates)
                    {
                        try
                        {
                            return ResponseBodyDeserializer.DeserializeUndiscriminatedUnionFallback(deserializationType, returnObject, propertyName, json);
                        }
                        catch (ResponseBodyDeserializer.DeserializationException)
                        {
                            // try next fallback option
                        }
                        catch (Exception)
                        {
                            throw;
                        }
                    }
                }

                throw new InvalidOperationException("Could not deserialize into any supported types.");
            }

            public override void WriteJson(JsonWriter writer, object? value, JsonSerializer serializer)
            {
                if (value == null) {
                    writer.WriteRawValue("null");
                    return;
                }
                Message res = (Message)value;
                if (MessageType.FromString(res.Type).Equals(MessageType.Null))
                {
                    writer.WriteRawValue("null");
                    return;
                }
                if (res.Str != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.Str));
                    return;
                }
                if (res.Number != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.Number));
                    return;
                }
                if (res.Boolean != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.Boolean));
                    return;
                }
                if (res.Four != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.Four));
                    return;
                }
                if (res.ArrayOf5 != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.ArrayOf5));
                    return;
                }

            }

        }

    }
}